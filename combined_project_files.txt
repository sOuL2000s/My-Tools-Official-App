
--- START FILE: .gitignore ---

# Gitignore for My Tools FERN Stack Project

# ====================
# General Node.js / npm
# ====================
# Node modules for both client and server directories
node_modules/
# Debugging logs
npm-debug.log*
yarn-debug.log*
.pnp
.pnp.js
.npm

# ====================
# Environment Variables
# ====================
# Server-side .env file (contains sensitive API keys, database credentials, etc.)
/server/.env

# Client-side .env files (Create React App specific for sensitive Firebase config)
# These are generated by CRA, so explicit paths are good.
/client/.env.local
/client/.env.development.local
/client/.env.test.local
/client/.env.production.local
# If for some reason you used a generic .env in the client root
/client/.env

# ====================
# Build Artifacts
# ====================
# React client build folder (generated by 'npm run build' in client)
/client/build/

# Any other general build/distribution directories (if you were to compile server code, etc.)
dist/
out/

# ====================
# IDEs and OS Specific Files
# ====================
.vscode/        # VS Code settings and launch configurations
.idea/          # IntelliJ / WebStorm IDE files
.DS_Store       # macOS specific files
Thumbs.db       # Windows thumbnail cache files
*.swp           # Vim swap files
*~              # Emacs backup files
*.bak           # General backup files

# ====================
# Testing & Coverage
# ====================
# Jest/React test coverage reports
/client/coverage/

# ====================
# Other temporary files
# ====================
.cache/         # General cache directories
*.tgz           # Tarball packages
.eslintcache    # ESLint cache file (from Create React App)
package-lock.json


--- END FILE: .gitignore ---

--- START FILE: client\.env.local ---

# client/.env.local
# Replace with your actual Firebase config values
REACT_APP_FIREBASE_API_KEY="AIzaSyA5Bt6BQVZoNme00ZCnjt7dKCoUUvlNqRw"
REACT_APP_FIREBASE_AUTH_DOMAIN="mytoolsapp-6a8be.firebaseapp.com"
REACT_APP_FIREBASE_PROJECT_ID="mytoolsapp-6a8be"
REACT_APP_FIREBASE_STORAGE_BUCKET="mytoolsapp-6a8be.firebasestorage.app"
REACT_APP_FIREBASE_MESSAGING_SENDER_ID="117626690354"
REACT_APP_FIREBASE_APP_ID="1:117626690354:web:a160a7ae58bf931538152b"
# Optionally, if you're using Firestore
REACT_APP_FIREBASE_MEASUREMENT_ID="G-1NVGN77Q8J"


--- END FILE: client\.env.local ---

--- START FILE: client\.gitignore ---

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Gitignore for My Tools FERN Stack Project

# ====================
# General Node.js / npm
# ====================
# Node modules for both client and server directories
node_modules/
# Debugging logs
npm-debug.log*
yarn-debug.log*
.pnp
.pnp.js
.npm

# ====================
# Environment Variables
# ====================
# Server-side .env file (contains sensitive API keys, database credentials, etc.)
/server/.env

# Client-side .env files (Create React App specific for sensitive Firebase config)
# These are generated by CRA, so explicit paths are good.
/client/.env.local
/client/.env.development.local
/client/.env.test.local
/client/.env.production.local
# If for some reason you used a generic .env in the client root
/client/.env

# ====================
# Build Artifacts
# ====================
# React client build folder (generated by 'npm run build' in client)
/client/build/

# Any other general build/distribution directories (if you were to compile server code, etc.)
dist/
out/

# ====================
# IDEs and OS Specific Files
# ====================
.vscode/        # VS Code settings and launch configurations
.idea/          # IntelliJ / WebStorm IDE files
.DS_Store       # macOS specific files
Thumbs.db       # Windows thumbnail cache files
*.swp           # Vim swap files
*~              # Emacs backup files
*.bak           # General backup files

# ====================
# Testing & Coverage
# ====================
# Jest/React test coverage reports
/client/coverage/

# ====================
# Other temporary files
# ====================
.cache/         # General cache directories
*.tgz           # Tarball packages
.eslintcache    # ESLint cache file (from Create React App)
package-lock.json


--- END FILE: client\.gitignore ---

--- START FILE: client\package.json ---

{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "firebase": "^12.2.1",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "dotenv-webpack": "^8.1.1"
  }
}


--- END FILE: client\package.json ---

--- START FILE: client\public\index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


--- END FILE: client\public\index.html ---

--- START FILE: client\public\manifest.json ---

{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


--- END FILE: client\public\manifest.json ---

--- START FILE: client\public\robots.txt ---

# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- END FILE: client\public\robots.txt ---

--- START FILE: client\src\App.css ---

/* client/src/App.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f4f7fa;
  color: #333;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.container {
  max-width: 1200px;
  margin: 20px auto;
  padding: 0 15px;
}

/* Basic form element styles for consistency */
input[type="email"],
input[type="password"],
input[type="text"],
textarea {
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  width: 100%;
  box-sizing: border-box; /* Include padding in width */
  margin-bottom: 10px;
}

button {
  cursor: pointer;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  font-size: 1rem;
  transition: background-color 0.2s ease;
}

button:hover {
  background-color: #0056b3;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

--- END FILE: client\src\App.css ---

--- START FILE: client\src\App.js ---

// client/src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import Navbar from './components/Navbar';
import ProtectedRoute from './components/ProtectedRoute';

// Pages
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import ToolOnePage from './pages/ToolOnePage';
import ToolTwoPage from './pages/ToolTwoPage';

import './App.css'; // Global styles

function App() {
  return (
    <Router>
      <AuthProvider>
        <Navbar />
        <div className="container">
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />

            {/* Protected Routes for Tools */}
            <Route
              path="/tool-one"
              element={
                <ProtectedRoute>
                  <ToolOnePage />
                </ProtectedRoute>
              }
            />
            <Route
              path="/tool-two"
              element={
                <ProtectedRoute>
                  <ToolTwoPage />
                </ProtectedRoute>
              }
            />

            {/* Fallback for unknown routes */}
            <Route path="*" element={<h1 style={{ textAlign: 'center', marginTop: '50px' }}>404 - Page Not Found</h1>} />
          </Routes>
        </div>
      </AuthProvider>
    </Router>
  );
}

export default App;

--- END FILE: client\src\App.js ---

--- START FILE: client\src\App.test.js ---

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--- END FILE: client\src\App.test.js ---

--- START FILE: client\src\index.css ---

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--- END FILE: client\src\index.css ---

--- START FILE: client\src\index.js ---

// client/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'; // You can keep default index.css or remove it
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();

--- END FILE: client\src\index.js ---

--- START FILE: client\src\logo.svg ---

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

--- END FILE: client\src\logo.svg ---

--- START FILE: client\src\reportWebVitals.js ---

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--- END FILE: client\src\reportWebVitals.js ---

--- START FILE: client\src\setupTests.js ---

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--- END FILE: client\src\setupTests.js ---

--- START FILE: client\src\components\Navbar.css ---

/* client/src/components/Navbar.css */
.navbar {
  background-color: #333;
  color: white;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.navbar-brand a {
  color: white;
  text-decoration: none;
  font-size: 1.5rem;
  font-weight: bold;
}

.navbar-links {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
}

.navbar-links li {
  margin-left: 1.5rem;
}

.navbar-links a {
  color: white;
  text-decoration: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  transition: background-color 0.2s ease;
}

.navbar-links a:hover {
  background-color: #555;
}

.logout-button {
  background-color: #dc3545; /* Red for logout */
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.2s ease;
}

.logout-button:hover {
  background-color: #c82333;
}

--- END FILE: client\src\components\Navbar.css ---

--- START FILE: client\src\components\Navbar.jsx ---

// client/src/components/Navbar.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import './Navbar.css'; // Optional: for basic styling

const Navbar = () => {
  const { currentUser, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch (error) {
      console.error('Failed to log out:', error);
      alert('Failed to log out');
    }
  };

  return (
    <nav className="navbar">
      <div className="navbar-brand">
        <Link to="/">My Tools</Link>
      </div>
      <ul className="navbar-links">
        {currentUser ? (
          <>
            <li><Link to="/tool-one">Tool One</Link></li>
            <li><Link to="/tool-two">Tool Two</Link></li>
            <li><button onClick={handleLogout} className="logout-button">Logout</button></li>
          </>
        ) : (
          <>
            <li><Link to="/login">Login</Link></li>
            <li><Link to="/register">Register</Link></li>
          </>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;

--- END FILE: client\src\components\Navbar.jsx ---

--- START FILE: client\src\components\ProtectedRoute.jsx ---

// client/src/components/ProtectedRoute.jsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { currentUser, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>; // Or a spinner component
  }

  return currentUser ? children : <Navigate to="/login" replace />;
};

export default ProtectedRoute;

--- END FILE: client\src\components\ProtectedRoute.jsx ---

--- START FILE: client\src\context\AuthContext.js ---

// client/src/context/AuthContext.js
import React, { createContext, useContext, useEffect, useState } from 'react';
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged
} from 'firebase/auth';
import { auth } from '../firebase/config';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Auth functions
  const signup = (email, password) => {
    return createUserWithEmailAndPassword(auth, email, password);
  };

  const login = (email, password) => {
    return signInWithEmailAndPassword(auth, email, password);
  };

  const logout = () => {
    return signOut(auth);
  };

  // Listen for auth state changes
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, user => {
      setCurrentUser(user);
      setLoading(false);
    });
    return unsubscribe; // Cleanup subscription on unmount
  }, []);

  const value = {
    currentUser,
    signup,
    login,
    logout,
    loading
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  return useContext(AuthContext);
};

--- END FILE: client\src\context\AuthContext.js ---

--- START FILE: client\src\firebase\config.js ---

// client/src/firebase/config.js
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore'; // Optional: for Firestore database

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID // Optional
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Firebase Authentication and get a reference to the service
export const auth = getAuth(app);

// Optional: Initialize Cloud Firestore and get a reference to the service
export const db = getFirestore(app);

export default app;

--- END FILE: client\src\firebase\config.js ---

--- START FILE: client\src\pages\HomePage.jsx ---

// client/src/pages/HomePage.jsx
import React from 'react';
import { useAuth } from '../context/AuthContext';

const HomePage = () => {
  const { currentUser } = useAuth();
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Welcome to My Tools!</h1>
      {currentUser ? (
        <p>Hello, {currentUser.email}! You are logged in.</p>
      ) : (
        <p>Please log in or register to access the tools.</p>
      )}
      <p>This is your central dashboard. Navigate to different tools using the navbar.</p>
    </div>
  );
};

export default HomePage;

--- END FILE: client\src\pages\HomePage.jsx ---

--- START FILE: client\src\pages\LoginPage.jsx ---

// client/src/pages/LoginPage.jsx
import React, { useRef, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const LoginPage = () => {
  const emailRef = useRef();
  const passwordRef = useRef();
  const { login, currentUser } = useAuth();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  // Redirect if already logged in
  if (currentUser) {
    navigate('/');
    return null; // Or show a message indicating already logged in
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      await login(emailRef.current.value, passwordRef.current.value);
      navigate('/');
    } catch (err) {
      console.error(err);
      setError('Failed to log in. Check your email and password.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: '400px', margin: '50px auto', padding: '20px', border: '1px solid #ccc', borderRadius: '8px' }}>
      <h2>Login</h2>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '15px' }}>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            ref={emailRef}
            required
            style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            ref={passwordRef}
            required
            style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
          />
        </div>
        <button disabled={loading} type="submit" style={{ width: '100%', padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
          {loading ? 'Logging In...' : 'Login'}
        </button>
      </form>
      <div style={{ marginTop: '15px', textAlign: 'center' }}>
        Need an account? <Link to="/register">Register</Link>
      </div>
    </div>
  );
};

export default LoginPage;

--- END FILE: client\src\pages\LoginPage.jsx ---

--- START FILE: client\src\pages\RegisterPage.jsx ---

// client/src/pages/RegisterPage.jsx
import React, { useRef, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const RegisterPage = () => {
  const emailRef = useRef();
  const passwordRef = useRef();
  const passwordConfirmRef = useRef();
  const { signup, currentUser } = useAuth();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  // Redirect if already logged in
  if (currentUser) {
    navigate('/');
    return null;
  }

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (passwordRef.current.value !== passwordConfirmRef.current.value) {
      return setError('Passwords do not match');
    }

    setError('');
    setLoading(true);

    try {
      await signup(emailRef.current.value, passwordRef.current.value);
      navigate('/');
    } catch (err) {
      console.error(err);
      setError('Failed to create an account. ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: '400px', margin: '50px auto', padding: '20px', border: '1px solid #ccc', borderRadius: '8px' }}>
      <h2>Register</h2>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '15px' }}>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            ref={emailRef}
            required
            style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            ref={passwordRef}
            required
            style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label htmlFor="password-confirm">Confirm Password:</label>
          <input
            type="password"
            id="password-confirm"
            ref={passwordConfirmRef}
            required
            style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }}
          />
        </div>
        <button disabled={loading} type="submit" style={{ width: '100%', padding: '10px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
          {loading ? 'Registering...' : 'Register'}
        </button>
      </form>
      <div style={{ marginTop: '15px', textAlign: 'center' }}>
        Already have an account? <Link to="/login">Login</Link>
      </div>
    </div>
  );
};

export default RegisterPage;

--- END FILE: client\src\pages\RegisterPage.jsx ---

--- START FILE: client\src\pages\ToolOnePage.jsx ---

// client/src/pages/ToolOnePage.jsx
import React from 'react';

const ToolOnePage = () => {
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Tool One: Calculator</h1>
      <p>This is where you'll implement your first amazing tool!</p>
      <div style={{ border: '1px dashed #007bff', padding: '30px', margin: '20px auto', maxWidth: '600px' }}>
        {/*
          Example: A simple Calculator component
          import Calculator from '../components/Calculator';
          <Calculator />
        */}
        <p>Implement your calculator UI and logic here.</p>
        <p>You can interact with Firebase Firestore here to save user preferences or calculations history if needed.</p>
      </div>
    </div>
  );
};

export default ToolOnePage;

--- END FILE: client\src\pages\ToolOnePage.jsx ---

--- START FILE: client\src\pages\ToolTwoPage.jsx ---

// client/src/pages/ToolTwoPage.jsx
import React from 'react';

const ToolTwoPage = () => {
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Tool Two: Text Analyzer</h1>
      <p>Here's another page for a different tool!</p>
      <div style={{ border: '1px dashed #28a745', padding: '30px', margin: '20px auto', maxWidth: '600px' }}>
        {/*
          Example: A text analysis component
          import TextAnalyzer from '../components/TextAnalyzer';
          <TextAnalyzer />
        */}
        <p>Implement your text analyzer (word count, character count, sentiment analysis via an external API, etc.) here.</p>
      </div>
    </div>
  );
};

export default ToolTwoPage;

--- END FILE: client\src\pages\ToolTwoPage.jsx ---

--- START FILE: server\index.js ---

// server/index.js
const express = require('express');
const path = require('path');
const cors = require('cors');
require('dotenv').config(); // Load environment variables from .env

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors()); // Enable CORS for all routes (important for development)
app.use(express.json()); // Parse JSON request bodies

// --- API Routes (Example - you can add more as your tools need server-side logic) ---
app.get('/api', (req, res) => {
    res.json({ message: 'Hello from Express API!' });
});

// --- Serve React App in production ---
// This section ensures Express serves the React app's build files
// when the server is deployed. During development, React's dev server
// handles the frontend.
if (process.env.NODE_ENV === 'production') {
    // Serve any static files
    app.use(express.static(path.join(__dirname, '../client/build')));

    // Handle React routing, return all requests to React app
    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, '../client/build', 'index.html'));
    });
}

// Start the server
app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
    console.log(`Environment: ${process.env.NODE_ENV}`);
});

--- END FILE: server\index.js ---

--- START FILE: server\package.json ---

{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",  
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2"
  }
}

--- END FILE: server\package.json ---

-------------------------------------------------------------------------------

replace toolone with an extremely powerful ai chatbot with every feature possible in the world using
api key : AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA
model : gemini-2.5-flash-preview-05-20